#!/bin/bash
# Default bashrc for the SydBâ˜®x shell
# Based in part upon /etc/bash/bashrc of Exherbo.
# Copyright (c) 2021 Ali Polatel <alip@exherbo.org>
# SPDX-License-Identifier: GPL-2.0-only

# TODO: add esandbox function!
unalias s
s() {
    if test $# -eq 0; then
        stat /dev/sydbox
    else
        stat "/dev/sydbox/$(echo "$@" | tr ' ' '/')"
    fi
}

# Don't run anything here unless we have an interactive shell.
if [[ $- != *i* ]] ; then
	return
fi

# Set colorful PS1 only on colorful terminals.
# dircolors --print-database uses its own built-in database
# instead of using /etc/DIR_COLORS.  Try to use the external file
# first to take advantage of user additions.
_use_color=false
if type -P dircolors >/dev/null ; then
        # Enable colors for ls, etc.
        LS_COLORS=
        if [[ -f ~/.dir_colors ]] ; then
                # If you have a custom file, chances are high that it's not the default.
                _used_default_dircolors="no"
                eval "$(dircolors -b ~/.dir_colors)"
        elif [[ -f /etc/DIR_COLORS ]] ; then
                # People might have customized the system database.
                _used_default_dircolors="maybe"
                eval "$(dircolors -b /etc/DIR_COLORS)"
        else
                _used_default_dircolors="yes"
                eval "$(dircolors -b)"
        fi
        if [[ -n ${LS_COLORS:+set} ]] ; then
                _use_color=true

                # The majority of systems out there do not customize these files, so we
                # want to avoid always exporting the large $LS_COLORS variable.  This
                # keeps the active env smaller, and it means we don't have to deal with
                # running new/old (incompatible) versions of `ls` compared to when we
                # last sourced this file.
                case ${_used_default_dircolors} in
                no) ;;
                yes) unset LS_COLORS ;;
                *)
                        ls_colors=$(eval "$(dircolors -b)"; echo "${LS_COLORS}")
                        if [[ ${ls_colors} == "${LS_COLORS}" ]] ; then
                                unset LS_COLORS
                        fi
                        ;;
                esac
        fi
fi

if ${_use_color} ; then
        if [[ ${EUID} == 0 ]] ; then
                PS1='\[\033[01;31m\]\h\[\033[01;34m\] \w \$\[\033[00m\] '
        else
                PS1='\[\033[01;35m\]\u@\h\[\033[01;34m\] \w \$\[\033[00m\] '
        fi

        alias ls='ls --color=auto'
        [[ $(basename "$(readlink -f /usr/bin/grep)") == ggrep ]] && alias grep='grep --color=auto'
else
        # show root@ when we don't have colors
        PS1='\u@\h \w \$ '
fi

# Things in /etc/sydbox/bashrc.d/ will be sourced for all interactive shells.
# This is useful for e.g. bash-completion.
for _f in /etc/sydbox/bashrc.d/* ; do
	[[ -r "${_f}" ]] && . "${_f}"
done

# Try to keep environment pollution down.
unset _f _match_lhs _safe_term _use_color _used_default_dircolors

# http://tiswww.case.edu/php/chet/bash/FAQ E11
# Make bash check if the window has been resized
shopt -s checkwinsize

# Check magic command status.
if test -e '/dev/sydbox'; then
    stat /dev/sydbox
    echo "/dev/sydbox: [0;1;32;92mOK[0m"
else
    echo "/dev/sydbox: [0;1;31;91mLOCKED[0m"
fi

# Disable shell history.
unset HISTFILE

# Greet the user.
test -n "$SYDBOX" && echo "$SYDBOX"
echo >&2 ""
echo >&2 "Welcome to Sydbâ˜®x shell. Have fun."
echo >&2 "Type \`exit' to exit."
echo >&2 ""

sig_ign() {
    :
}
trap sig_ign SIGALRM SIGHUP SIGINT SIGQUIT SIGPIPE SIGTERM SIGUSR1 SIGUSR2
exit() {
    if test -x "@SYDBOX_SHARE_DIR@"/tao.pl; then
        "@SYDBOX_SHARE_DIR@"/tao.pl
    fi
    builtin exit "$@"
}

###
# bashrc: mostly based on ciaranm's.
###
########################################################################
# Evil bash settings file for Ciaran McCreesh
#
# Not many comments here, you'll have to guess how it works. Note that
# I use the same .bashrc on Linux, IRIX and Slowaris, so there's some
# strange uname stuff in there.
#
########################################################################

shopt -s extglob

# {{{ Locale stuff
eval unset ${!LC_*} LANG
export LANG="en_GB.UTF-8"
export LC_COLLATE="C"
# }}}

# {{{ timezone
if [[ -z "${TZ}" ]] ; then
    export TZ=UTC
fi
# }}}

# {{{ Core
ulimit -c0
# }}}

# {{{ Terminal Settings
case "${TERM}" in
    xterm*)
        export TERM=xterm-256color
        bashrc_term_colours=256
        ;;
    screen)
        bashrc_term_colours=256
        ;;
    dumb)
        bashrc_term_colours=2
        ;;
    *)
        bashrc_term_colours=16
        ;;
esac

case "${TERM}" in
    xterm*)
        PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\007"'
        ;;
    screen)
        PROMPT_COMMAND='echo -ne "\033_${USER}@${HOSTNAME%%.*}:${PWD/$HOME/~}\033\\"'
        ;;
esac
# }}}

# {{{ Path
if [[ -n "${PATH/*$HOME\/bin:*/}" ]] ; then
    export PATH="$HOME/bin:$PATH"
fi

if [[ -n "${PATH/*\/usr\/local\/bin:*/}" ]] ; then
    export PATH="/usr/local/bin:$PATH"
fi

if [[ -n "${PATH/\/sbin:*/}" ]] ; then
    export PATH="$PATH:/sbin"
fi

if [[ -n "${PATH/\/usr\/sbin:*/}" ]] ; then
    export PATH="$PATH:/usr/sbin"
fi
# }}}

# {{{ Pager
if [[ -f /usr/bin/less ]] ; then
    export PAGER=less
    export LESS="--ignore-case --long-prompt"
else
    export MANPAGER="env LANG=C less -r"
fi
alias page=$PAGER
# }}}

# {{{ mozilla
export MOZILLA_NEWTYPE=tab
# }}}

# {{{ ls, pushd etc
if [[ -f /etc/DIR_COLORS ]] && [[ ${bashrc_term_colours} -ge 8  ]] ; then
    eval $(dircolors -b /etc/DIR_COLORS )
    alias ls="ls --color=if-tty"
    alias ll="ls --color=if-tty -l -h"
elif type dircolors &>/dev/null && [[ ${bashrc_term_colours} -ge 8  ]] ; then
    eval $(dircolors )
    alias ls="ls --color=if-tty"
    alias ll="ls --color=if-tty -l -h"
elif [[ "${bashrc_uname_s}" == "FreeBSD" ]] ; then
    export CLICOLOR="yes"
    export LSCOLORS=Gxfxcxdxbxegedabagacad
    alias ll="ls -l -h"
else
    alias ll="ls -l"
fi

alias pd="pushd"
alias pp="popd"
# }}}

# {{{ Completion, history
if [[ -f /usr/share/bash-completion/bash_completion ]] ; then
    . /usr/share/bash-completion/bash_completion
fi

export COMP_WORDBREAKS=${COMP_WORDBREAKS/:/}

export FIGNORE='~'

export HISTCONTROL=ignorespace:ignoredups
export HISTFILESIZE=50000
export HISTSIZE=50000

shopt -s histverify
# }}}

grab() {
    sudo chown -R ${USER} ${1:-.}
}

mkcd() {
    mkdir $1 && cd $1
}

alias clean="rm *~"

xt() {
    echo -n -e "\033]0;$*\007"
}
# }}}

# {{{ Colours
case "${bashrc_term_colours}" in
    256)
        bashrc_colour_l_blue='\033[38;5;33m'
        bashrc_colour_d_blue='\033[38;5;21m'
        bashrc_colour_m_purp='\033[38;5;69m'
        bashrc_colour_l_yell='\033[38;5;229m'
        bashrc_colour_m_yell='\033[38;5;227m'
        bashrc_colour_m_gren='\033[38;5;35m'
        bashrc_colour_m_grey='\033[38;5;245m'
        bashrc_colour_m_orng='\033[38;5;208m'
        bashrc_colour_l_pink='\033[38;5;206m'
        bashrc_colour_m_teal='\033[38;5;38m'
        bashrc_colour_m_brwn='\033[38;5;130m'
        bashrc_colour_l_whte='\033[38;5;230m'
        bashrc_colour_end='\033[0;0m'
        ;;
    16)
        bashrc_colour_l_blue='\033[1;34m'
        bashrc_colour_d_blue='\033[0;32m'
        bashrc_colour_m_purp='\033[0;35m'
        bashrc_colour_l_yell='\033[1;33m'
        bashrc_colour_m_yell='\033[0;33m'
        bashrc_colour_m_gren='\033[0;32m'
        bashrc_colour_m_grey='\033[0;37m'
        bashrc_colour_m_orng='\033[1;31m'
        bashrc_colour_l_pink='\033[1;35m'
        bashrc_colour_m_teal='\033[0;36m'
        bashrc_colour_m_brwn='\033[0;31m'
        bashrc_colour_l_whte='\033[0;37m'
        bashrc_colour_end='\033[0;0m'
        ;;
    *)
        eval unset ${!bashrc_colour_*}
        ;;
esac

bashrc_colour_usr=${bashrc_colour_l_pink}
bashrc_colour_cwd=${bashrc_colour_m_gren}
bashrc_colour_wrk=${bashrc_colour_m_teal}
bashrc_colour_rok=${bashrc_colour_d_blue}
bashrc_colour_rer=${bashrc_colour_m_orng}
bashrc_colour_job=${bashrc_colour_l_pink}
bashrc_colour_dir=${bashrc_colour_m_brwn}
bashrc_colour_mrk=${bashrc_colour_l_pink}
bashrc_colour_lda=${bashrc_colour_m_gren}
bashrc_colour_scr=${bashrc_colour_l_blue}
bashrc_colour_scm=${bashrc_colour_m_orng}

case "${HOSTNAME:-$(hostname )}" in
    sydbâ˜®x*)
        bashrc_colour_hst=${bashrc_colour_m_purp}
        ;;
    *)
        bashrc_colour_hst=${bashrc_colour_l_pink}
        ;;
esac
# }}}

# {{{ Prompt
ps_sandbox() {
    if test -e /dev/sydbox; then
        echo -e "${bashrc_colour_l_pink}>${bashrc_colour_m_orng}syd:â˜ "
    else
        echo -e "${bashrc_colour_l_pink}>${bashrc_colour_m_gren}syd:âœ“"
    fi
}

ps_retc_f() {
    if [[ ${1} -eq 0 ]] ; then
        echo -e "${bashrc_colour_rok}"
    else
        echo -e "${bashrc_colour_rer}"
    fi
    return $1
}

ps_job_f() {
    local j="$(jobs)"
    if [[ -n ${j} ]] ; then
        local l="${j//[^$'\n']/}"
        echo "&$(( ${#l} + 1 )) "
    fi
}

ps_dir_f() {
    if [[ "${#DIRSTACK[@]}" -gt 1 ]] ; then
        echo "^$(( ${#DIRSTACK[@]} - 1 )) "
    fi
}

ps_lda_f() {
    local u=$(uptime )
    u=${u#*average?(s): }
    echo "${u%%,*} "
}

ps_scr_f() {
    if [[ "${TERM/screen/}" != "${TERM}" ]] ; then
        echo "s "
    fi
}

PROMPT_COMMAND="export prompt_exit_status=\$? ; $PROMPT_COMMAND"
ps_usr="\[${bashrc_colour_usr}\]\u@"
ps_hst="\[${bashrc_colour_hst}\]\h\$(ps_sandbox) "
ps_cwd="\[${bashrc_colour_cwd}\]\W\[${bashrc_colour_wrk}\] "
ps_mrk="\[${bashrc_colour_mrk}\]\$ "
ps_end="\[${bashrc_colour_end}\]"
ps_ret='\[$(ps_retc_f $prompt_exit_status)\]$prompt_exit_status '
ps_job="\[${bashrc_colour_job}\]\$(ps_job_f)"
ps_lda="\[${bashrc_colour_lda}\]\$(ps_lda_f)"
ps_dir="\[${bashrc_colour_dir}\]\$(ps_dir_f)"
ps_scr="\[${bashrc_colour_scr}\]\$(ps_scr_f)"
export PS1="${ps_sav}${ps_usr}${ps_hst}${ps_cwd}${ps_ret}${ps_lda}${ps_job}${ps_dir}${ps_scr}${ps_scm}"
export PS1="${PS1}${ps_mrk}${ps_end}"
# }}}

true

# vim: set et ts=4 tw=120 :
